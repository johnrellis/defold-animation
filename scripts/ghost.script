local movement = require "scripts.modules.movement"

function init(self)
	self.dir = vmath.vector3(1,0,0)
	self.speed = 200
	self.correction = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local p = go.get_position()
	go.set_position(p + movement:restrict_move(5,self.dir * self.speed * dt))
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("wall") then
			
			if message.distance > 0 then
				-- First, project the accumulated correction onto
				-- the penetration vector
				local proj = vmath.project(self.correction, message.normal * message.distance)
				if proj < 1 then
					-- Only care for projections that does not overshoot.
					local comp = (message.distance - message.distance * proj) * message.normal
					-- Apply compensation
					go.set_position(go.get_position() + comp)
					-- Accumulate correction done
					self.correction = self.correction + comp
					self.dir = self.dir * -1
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
